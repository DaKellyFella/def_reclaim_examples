/* Lock-free seperate chaining hash table.
 * From paper "High Performance Dynamic Lock-Free Hash Tables and List-Based Sets".
 * Lock-free updates (contains,add/remove).
*/

import "stdio.h";


typedef node =
  {
    key      u64,     // Key.
    next    node_ptr    // Next.
  };

typedef node_ptr = volatile * volatile node;

export opaque
typedef so_ht_t =
  {
    size  u64,
    max_load u64,
    table *node_ptr
  };

typedef list_view_t =
{
  previous *node_ptr,
  current node_ptr,
  next node_ptr
};

export
def so_ht_create(size u64, max_load u64) -> *so_ht_t
begin
  var ret = new so_ht_t;
  ret.size = size;
  ret.max_load = max_load;
  ret.table = new[ret.size]node_ptr;
  for var i i32 = 0; i < size; i++ do
    ret.table[i] = nil;
  od
  ret.table[0] = new node;
  ret.table[0].key = 0;
  return ret;
end

export
def so_ht_contains(set *so_ht_t, key i64) -> bool
begin
    var bucket u64 = key % set.size;
    if set.table[bucket] == nil then
      initialise_bucket(set, bucket);
    fi
    var view list_view_t = {nil, nil, nil};
    return find(&view, &set.table[bucket], so_regular_key(key));
end

export
def so_ht_add(set *so_ht_t, key i64) -> bool
begin
  var node = new node;
  node.key = so_regular_key(key);
  var bucket u64 = key % set.size;
  if set.table[bucket] == nil then
    initialise_bucket(set, bucket);
  fi
  var view list_view_t = {nil, nil, nil};
  if !so_list_add(&view, &set.table[bucket], node, node.key) then
    delete node;
    return false;
  fi
  var size = set.size;
  //if((__sync_fetch_and_add(&set->count, 1) / size) > set->max_load) {
  //  // bool _ = __sync_bool_compare_and_swap(&set->size, size, size * 2);
  //}
  return true;
end

export
def so_ht_remove_retire(set *so_ht_t, key i64) -> bool
begin
  var bucket u64 = key % set.size;
  if set.table[bucket] == nil then
    initialise_bucket(set, bucket);
  fi
  if !so_list_remove_retire(&set.table[bucket], so_regular_key(key)) then
    return false; 
  fi
  //size_t _ = __sync_fetch_and_sub(&set->count, 1);
  return true;
end

export
def so_ht_remove_leaky(set *so_ht_t, key i64) -> bool
begin
  var bucket u64 = key % set.size;
  if set.table[bucket] == nil then
    initialise_bucket(set, bucket);
  fi
  if !so_list_remove_leaky(&set.table[bucket], so_regular_key(key)) then
    return false; 
  fi
  //size_t _ = __sync_fetch_and_sub(&set->count, 1);
  return true;
end


def find(view *list_view_t, head volatile *node_ptr, key i64) -> bool
begin
retry:
  view.previous = head;
  view.current = view.previous[0];
  while true do
    if unmark(view.current) == nil then return false; fi
    view.next = unmark(view.current).next;
    var cur_key = unmark(view.current).key;
    if view.previous[0] != unmark(view.current) then 
      goto retry;
    fi
    if !is_marked(view.current) then
      if cur_key >= key then
        return cur_key == key;
      fi
      view.previous = &unmark(view.current).next;
    elif !__builtin_cas(view.previous, view.current, view.next) then
        goto retry;
    fi
    view.current = view.next;
  od
end

def so_list_contains(head volatile *node_ptr, so_key u64) -> bool
begin
  var view list_view_t = {nil, nil, nil};
  return find(&view, head, so_key);
end

def so_list_add(view *list_view_t, head volatile *node_ptr, new_node node_ptr, so_key u64) -> bool
begin
  while true do
    var view list_view_t = {nil, nil, nil};
    if find(&view, head, so_key) then
      return false;
    fi
    new_node.next = unmark(view.current);
    if __builtin_cas(view.previous, view.current, new_node) then
      return true;
    fi
  od
end

def so_list_remove_retire(head volatile *node_ptr, so_key u64) -> bool
begin
  while true do
    var view list_view_t = {nil, nil, nil};
    if !find(&view, head, so_key) then
      return false;
    fi
    if !__builtin_cas(&view.current.next, view.next, mark(view.next)) then
      continue;
    fi
    if !__builtin_cas(view.previous, view.current, unmark(view.next)) then
      find(&view, head, so_key);
    else
      retire view.current;
    fi
    return true;
  od
end

def so_list_remove_leaky(head volatile *node_ptr, so_key u64) -> bool
begin
  while true do
    var view list_view_t = {nil, nil, nil};
    if !find(&view, head, so_key) then
      return false;
    fi
    if !__builtin_cas(&view.current.next, view.next, mark(view.next)) then
      continue;
    fi
    if !__builtin_cas(view.previous, view.current, unmark(view.next)) then
      find(&view, head, so_key);
    fi
    return true;
  od
end

def bitwise_not(input u64) -> u64
begin
  var result u64 = 0;
  var mask u64 = 1;
  for var shift_count = 0; shift_count < 64U64; shift_count++ do
    if (input & mask) != mask then
      result = result | mask;
    fi
    mask++;
  od
  return result;
end

def get_parent(bucket u64) -> u64
begin
  var copy_bucket u64 = reverse_bits(bucket);
  for var mask u64 = 1; mask <= copy_bucket; mask = mask << 1 do
    if (copy_bucket & mask) == mask then
      copy_bucket = copy_bucket & ~mask;
      break;
    fi
  od
  return reverse_bits(copy_bucket);
end

def initialise_bucket(set *so_ht_t, bucket u64) -> void
begin
  var parent u64 = get_parent(bucket);
  if set.table[parent] == nil then
    initialise_bucket(set, parent);
  fi
  var dummy_node = new node;
  dummy_node.key = so_dummy_key(bucket);
  var view list_view_t = {nil, nil, nil};
  if !so_list_add(&view, &set.table[parent], dummy_node, dummy_node.key) then
    delete dummy_node;
    dummy_node = unmark(view.current);
  fi
  set.table[bucket] = dummy_node;
end

// Ref: https://graphics.stanford.edu/~seander/bithacks.html#BitReverseObvious
def reverse_bits(key u64) -> u64
begin
  var shift_amount = 63;
  var result = key;
  for var cur_key = key >> 1; cur_key > 0; cur_key = cur_key >> 1 do
    result = result << 1;
    result |= key & 1;
    shift_amount--;
  od
  return result << shift_amount;
end

def so_regular_key(key u64) -> u64
begin
  return reverse_bits(key) | 0x1;
end

def so_dummy_key(key u64) -> u64
begin  
  return reverse_bits(key);
end

def is_dummy(key u64) -> bool
begin  
  return (key & 0x1) == 0x0;
end

def ref_and_markbit (ptr node_ptr) -> { node_ptr, bool } =
  { unmark(ptr), is_marked(ptr) };

def mark (ptr node_ptr) -> node_ptr =
  cast node_ptr (0x1I64 | cast i64 (ptr));

def unmark (ptr node_ptr) -> node_ptr =
  cast node_ptr (0xFFFFFFFFFFFFFFFEI64 & cast i64 (ptr));

def is_marked (ptr node_ptr) -> bool =
  cast bool (0x1I64 & cast i64 (ptr));
